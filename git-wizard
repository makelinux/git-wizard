#!/bin/zsh


# Git Wizard
# Interactive front end git wrapper script

declare -A prop flag msg
declare -a keys actprop actkey conf act

echo | espeak 2> /dev/null
quiet=$?

action=
while [[ "$1" =~ "^--" ]]; do
	case $1 in
		'--quiet') quiet=1; shift;;
		'--action') action=$2; shift 2;;
		*)
			echo error: unknown argument $1
			break
			;;
	esac
done

ask()
{
	test "$action" && REPLY=$action && return
	read -r -k "?$1"
}

reset()
{
	prop=()
	flag=()
	msg=()
	keys=()
	actprop=()
	actkey=()
	conf=()
	act=()
}

# function for acquiring common property
prop()
{
	k=$2
	flag[$k]="$1"
	keys+=($k)
	msg[$k]="${3/\%1/$k}"
	prop[$k]="$4"
	shift 4
	[ "$1" ] && echo unclaimed "$@"
}

# functions for reading git property
prop_git() { prop "$1" "$2" "$3" "$(zsh -c "git $4" 2>/dev/null)" }

# rep - property for report only
rep() { prop_git "l" "$1" "$2" "$3" }

# prs - property for summary and report
prs() { prop_git "s" "$1" "$2" "$3" }

# function for
# linking available git actions
# with properties

# internal action
acti()
{
	actprop+=($1)
	#[[ "${actkey[(ie)$2]}" -le "${#actkey}" ]] && echo "duplicated key $2"
	actkey+=("$2")
	conf+=("$3")
	flag[$1]+=a
	act+=($4)
	shift 4
	[ "$1" ] && echo unclaimed "$@"
}

# git action
actg()
{
	acti $1 $2 $3 "git $4"
}

out()
{
	echo "$1 $2"
	[ $quiet != 0 ] && return
	test "$action" && return
	espeak "$2" 2> /dev/null &
}

print-actions()
{
	for n ({1..${#actprop}}) {
		[[ $actprop[$n] != $key ]] && continue
		kk+=($actkey[$n])
		actk[$actkey[$n]]=$act[$n]
		echo " [$actkey[$n]] - $conf[$n]"
	}
	echo " [Enter] - continue"
	echo " * - exit"
}

# Ask user which available actions to perform
perform-actions()
{
	declare -a kk
	declare -A actk
	for key ($keys) {
		let n+=1
		v=$prop[$key]
		[[ ! $flag[$key] =~ a ]] && continue
		[[ -z "$v" || "$v" == 0 ]] && continue

		out "What to do with" "$(prop-print $key) ?"
		print-actions
		ask '>'
		[ "$REPLY" = $'\n' ] && continue
		echo
		[ -z "$actk[$REPLY]" ] && return 1
		eval $actk[$REPLY]
		test "$action" && exit
		break
	}
	test "$action" && exit
	[ $#actk -eq 0 ] && echo "Nothing to do" && exit
	echo
}

prop-print()
{
	key=$1
	m=$msg[$key]
	if [[ $m =~ '@v' ]]; then
		m=${m/@v/$prop[$key]}
	else
		m="$prop[$key] $m"
	fi
	p="$prop[$key]"
	m=$m-EOL
	if [[ $p =~ '^[0-9]+$' ]] && [ $p -gt 1 ]; then
		m=${m/\(s\)/s}
	else
		m=${m/es-EOL/}
		m=${m/commits-EOL/commit}
	fi
	m=${m/-EOL/}
	m=${m/\(s\)/}
	m=${m/_/ }
	echo -n "$m"
}

summary()
{
	local m="Summary: head '$prop[head]'"
	for key in $keys; do
		[[ ! $flag[$key] =~ s ]] && continue
		p="$prop[$key]"
		[ -z "$p" -o "$p" = 0 ] && continue
		m+=", $(prop-print $key)"
	done
	out "" $m
}

report()
{
	summary
	for key in $keys; do
		m=${msg[$key]/\(s\)/s}
		m=${m/ \@v/}
		m=${m/ \'\@v\'/}
		m=${m//_/ }
		[ -z $msg[$key] ] && continue
		echo "$m: $prop[$key]"
	done
	wait
	#git branch --all
	echo
}

in_progress()
{
	prs unmerged '%1 file(s)' 'diff --name-status --diff-filter=U | wc -l'
	actg unmerged g "Run merge tool" mergetool

	prop s in_progress '%1' "$(git status --untracked-files=no HEAD | grep -q -e "You are" -e "in progress" && echo "an operation")"
	actg in_progress ' ' "Check head status" 'status --untracked-files=no HEAD' # without modifered
	actg in_progress c "Continue rebase" 'rebase --continue'
	# TODO:
	# git status -uno HEAD | grep 'rebase in progress'
	# git commit --amend
	# git rebase --edit-todo

}

diff_to_quickfix()
{
	local file=
	while read a;do
		[[ "$a" =~ "^\+\+\+ (.*)" ]] && file=$match
		[[ "$a" =~ "^@@.*\+([0-9]+)" ]] && echo "$file:$match:$a"
	done
	#perl -ne '/^\+\+\+ (.+)/ && { $f="$1"};/@@.*\+(\d+)/ &&print "$f:$1:$_\n"'
}

modified()
{
	prs staged '%1 file(s)' 'diff --name-only --staged | wc -l'
	actg staged ' ' "show" 'diff --staged'
	actg staged c "commit" commit
	actg staged R "unstage (reset) modifications" 'reset --patch'

	prs modified '%1 file(s)' 'diff --name-only | wc -l'
	actg modified 't' "stat" 'diff --stat'
	actg modified ' ' "show" 'diff'
	actg modified u "update stage with modifications" 'add --patch'
	actg modified s "push into stash" 'stash push --patch'
	actg modified d "discard" 'checkout --patch'
	acti modified 'e' "edit with vim quickfix" "vim -q <(git diff -U0 --relative --no-prefix | diff_to_quickfix)"
	actg modified 'g' "gui" "gui"
}

head-branch()
{
	rep head "%1 '@v'" 'describe --all --contains --always'
	acti head ' ' 'print report' report
	actg head c 'show the last commit' 'show --stat'
	actg head l 'list recent log' 'log --pretty="format:%ar: %ae: %h %s" --reverse -n $((LINES-2))'
	actg head s "check head status" 'status --untracked-files=no HEAD' # without modifered
	acti head 'k' "explore with gitk" "gitk"

	rep branch '' 'rev-parse --abbrev-ref HEAD'
	rep local_branches '%1' 'branch | wc -l'
	branches_format='%(committerdate:short) - %(align:left,25)%(committerdate:relative)%(end) %(align:left,25)%(objectname:short) %(refname:short)%(end) %(subject)'
	actg local_branches ' ' 'list' "for-each-ref --sort=committerdate --format '$branches_format' refs/heads"
	rep remote_branches '%1' 'branch --remote | wc -l'
	actg remote_branches ' ' 'list recent' "branch --remotes --sort=committerdate --format '$branches_format' | tail -n $((LINES-2))"

	prs stashes '%1' 'stash list | wc -l'
	actg stashes ' ' "show and list stash" 'stash show; git stash list --stat'
	actg stashes o "pop from stash" 'stash pop'
	rep commited '%1' 'log -1 --format="%ar"'
}

remote()
{
	rep remote '%1' "config --get branch.$prop[branch].remote"
	if [[ $prop[remote] ]]; then
		local h=$git_dir/FETCH_HEAD
		test -e $h && prop l fetch_age '%1 (min) @v' "$(((`date +%s` - `stat -c %Z $h`) / 60))"
		#((fetch= ! ${#fetch_age} || $prop[fetch_age] > 10 || $prop[fetch_age] < 0))
		if [[ -z "$prop[fetch_age]" || "$prop[fetch_age]" -gt 10 || "$prop[fetch_age]" -lt 0 ]]; then
			git fetch --all
		fi
		prs local_commits '%1' 'rev-list --count @{u}..HEAD'
		actg local_commits ' ' "list" "log ..@{u}"
		actg local_commits p "Push to remote" push
		rep remote_commits '%1' 'rev-list --count HEAD..@{u}'
		actg remote_commits ' ' "list" 'log --stat HEAD..@{u}'
		actg remote_commits l "pull from remote" 'pull --autostash'
	fi
}

action_itemes()
{
	rep action_itemes '%1' 'grep --max-depth=3 -w -eTODO -eFIXME | wc -l'
	actg action_itemes ' ' list 'grep -w -n -eTODO -eFIXME'
	acti action_itemes 'e' edit 'vim -q <(git grep -w -n -eTODO -eFIXME)'

	prs gone_branches '%1' "branch -vv | grep ': gone]' | wc -l"
	actg gone_branches 'D' "delete gone branches" 'branch -d $(git branch --format="%(if:equals=[gone])%(upstream:track)%(then)%(refname:short)%(else)%(end)")'
}

untracked()
{
	prs untracked '%1 file(s)' 'ls-files --others --exclude-standard --directory| wc -l'
	actg untracked ' ' "list" 'status --untracked-files=normal'
	actg untracked a "add and stage" 'add --interactive'
	actg untracked C "cleanup" 'clean --interactive -d'
	actg untracked i "ignore" \
		'ls-files --others --directory --exclude-standard --exclude .gitignore \
		>> .gitignore'
}

git-general()
{
	# rep - property for report only, prs - long and short
	git_dir=$(git rev-parse --git-dir)
	rep root '%1 @v' 'rev-parse --show-toplevel'

	in_progress
	modified
	head-branch
	remote
	action_itemes
	untracked
}

gitw-start()
{
	case $1 in
		report)
			git-general
			report
			exit;;
		'')
			true
			until [ $? -eq 1 ] ; do
				reset
				git-general
				# summary
				perform-actions
			done
			;;
		*)	echo Unknown command $1. ;;
	esac
}

[ "$1" = unit-tests ] &&
{
	local fails=0
	d=$(mktemp -d)
	pushd $d
	git-wizard --action y || { echo Fail && false }
	let fails+=$?
	popd
	rm -rf $d
	echo Fails: $fails
	exit $fails
}

if [ $(git rev-parse --show-toplevel 2> /dev/null) ]; then
	gitw-start "$@"
else
	out "" "Here is no a git repository"
	for c in $(xsel) $(xsel --clipboard); do
		if _=$(expr match "$c" ".*:.*/.*git.*"); then
			echo "Clipboard content looks like git url: $c"
			ask 'Clone? (y/n)'
			echo
			[[ $REPLY =~ ^[Yy]$ ]] && git clone "$c"
		fi
	done
	ask 'Create empty? (y/n)'
	echo
	[[ $REPLY =~ ^[Yy]$ ]] && git init .
	test -d .git
fi
exit $?

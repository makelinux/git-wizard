#!/bin/zsh

# Git Wizard
# Interactive front end git wrapper script

declare -A prop flag msg
declare -a keys actprop actkey conf act

reset()
{
	prop=()
	flag=()
	msg=()
	keys=()
	actprop=()
	actkey=()
	conf=()
	act=()
}

# function for acquiring common property
prop()
{
	k=$2
	flag[$k]="$1"
	keys+=($k)
	msg[$k]="${3/\%1/$k}"
	prop[$k]="$4"
	shift 4
	[ "$1" ] && echo unclaimed "$@"
}

# functions for reading git property
prop_git() { prop "$1" "$2" "$3" "$(zsh -c "git $4" 2>/dev/null)" }

# prl - long only property
prl() { prop_git "l" "$1" "$2" "$3" }

# prs - long and short
prs() { prop_git "s" "$1" "$2" "$3" }

# function for
# linking available git actions
# with properties

act()
{
	actprop+=($1)
	actkey+=("$2")
	conf+=("$3")
	act+=("git $4")
	shift 4
	[ "$1" ] && echo unclaimed "$@"
}


# Ask user which available actions to perform
perform-actions()
{
	declare -a kk
	declare -A actk
	kk=(l)
	actk[l]=report-long
	echo " [l] - Long status"
	for n ({1..${#actprop}}) {
		v=$prop[$actprop[$n]]
		[[ -z "$v" || "$v" == 0 ]] && continue
		kk+=($actkey[$n])
		actk[$actkey[$n]]=$act[$n]
		echo " [$actkey[$n]] - $conf[$n]"
	}
	echo " * - exit"
	read -r -k "?>"
	echo
	[ -z "$actk[$REPLY]" ] && return 1
	eval $actk[$REPLY]
	echo
}

report-short()
{
	echo -n "At '$prop[head]'"
	for key in $keys; do
		[[ ! $flag[$key] =~ s ]] && continue
		m=$msg[$key]
		if [[ $m =~ '@v' ]]; then
			m=${m/@v/$prop[$key]}
		else
			m="$prop[$key] $m"
		fi
		p="$prop[$key]"
		[ -z "$p" -o "$p" = 0 -o -z $m ] && continue
		[[ $p =~ '^[0-9]+$' ]] && [ $p -gt 1 ] && m=${m/\(s\)/s}
		m=${m/\(s\)/}
		echo -n ", $m"
	done
	echo
}

report-long()
{
	for key in $keys; do
		m=${msg[$key]/\(s\)/s}
		m=${m/ \@v/}
		m=${m//_/ }
		[ -z $msg[$key] ] && continue
		echo "$m: $prop[$key]"
	done
	git status --untracked-files=no HEAD
	echo
}

git-general()
{
	# prl - long only property, prs - long and short
	git_dir=$(git rev-parse --git-dir)
	prl root '%1 @v' 'rev-parse --show-toplevel'
	prl head '%1' 'describe --all --contains --always'
	prl branch '' 'rev-parse --abbrev-ref HEAD'
	prl remote '%1' "config --get branch.$prop[branch].remote"

	prs unmerged '%1 file(s)' 'diff --name-status --diff-filter=U | wc -l'
	act unmerged m "Run merge tool" mergetool

	prs changed '%1 file(s)' 'diff --name-only | wc -l'
	act changed u "Selectively Update stage with changes" 'add --patch'
	act changed s "Stash all changes" 'stash push'

	prs untracked '%1 file(s)' 'ls-files --others --exclude-standard --directory| wc -l'
	act untracked a "Add and stage" 'add --interactive'
	act untracked l "Cleanup" 'clean --interactive -d'
	# TODO: add to .gitignore

	prs staged '%1 file(s)' 'diff --name-only --staged | wc -l'
	act staged c "Commit staged" commit
	act staged r "Unstage (reset) changes" 'reset --patch'

	prs stashes '%1' 'stash list | wc -l'
	prl commited '%1' 'log -1 --format="%ar"'

	prs in_progress '%1' 'merge HEAD > /dev/null && git status -uno HEAD | {! grep -q "in progress"}; echo $?'
	act in_progress t "Check status" 'status --untracked-files=no HEAD' # without modifered
	# TODO:
	# git status -uno HEAD | grep 'rebase in progress'
	# all conflicts fixed: run "git rebase --continue"
	# git commit --amend
	# git rebase --edit-todo
	# git rebase --continue

	if [[ $prop[remote] ]]; then
		local h=$git_dir/FETCH_HEAD
		test -e $h && prop l fetch_age '%1 (min) @v' "$(((`date +%s` - `stat -c %Z $h`) / 60))"
		#((fetch= ! ${#fetch_age} || $prop[fetch_age] > 10 || $prop[fetch_age] < 0))
		if [[ -z "$prop[fetch_age]" || "$prop[fetch_age]" -gt 10 || "$prop[fetch_age]" -lt 0 ]]; then
			git fetch --all
		fi
		prs ahead '%1' 'rev-list --count @{u}..HEAD'
		act ahead p "Push to remote" push
		prl behind '%1' 'rev-list --count HEAD..@{u}'
		act behind l "pull from remote" 'pull --autostash'
	fi
}

gitw-start()
{
	case $1 in
		branches)
			git for-each-ref --sort=authordate \
				--format "%(committerdate:unix)	%(committerdate:relative)	%(align:left,25)%(refname:short)%(end) %(subject)" \
				refs/heads | sort | cut -f2- ;;
		*)
			true
			until [ $? -eq 1 ] ; do
				reset
				git-general
				report-short
				perform-actions
			done
			;;
	esac
}

prl root '%1 @v' 'rev-parse --show-toplevel'

if [ $(git rev-parse --show-toplevel) ]; then
	gitw-start "$@"
else
	echo "Not a git repository"
	read -r -k "?Create empty? (y/n)"
	echo
	[[ $REPLY =~ ^[Yy]$ ]] && git init .
	#exit 1
fi
exit
